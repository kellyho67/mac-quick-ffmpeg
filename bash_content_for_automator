#!/bin/zsh

# Process only the first file
input_file="$1"

# Check if we have a file to process
if [[ -z "$input_file" ]]; then
  osascript -e 'display dialog "No file selected." buttons {"OK"} with title "Video Trimmer"'
  exit 1
fi

# Prompt for trim start
  trim_start=$(osascript -e 'text returned of (display dialog "Trim how many seconds from the START?" default answer "0" with title "Video Trimmer")')
  
  # Check if user cancelled
  if [[ $? -ne 0 ]]; then
    exit 0
  fi


  # Prompt for trim end
  trim_end=$(osascript -e 'text returned of (display dialog "Trim how many seconds from the END?" default answer "0" with title "Video Trimmer")')
  
  # Check if user cancelled
  if [[ $? -ne 0 ]]; then
    exit 0
  fi


  # Set defaults if empty
  trim_start=${trim_start:-0}
  trim_end=${trim_end:-0}


  if ! [[ "$trim_start" =~ '^[0-9]+([.][0-9]+)?$' ]] || ! [[ "$trim_end" =~ '^[0-9]+([.][0-9]+)?$' ]]; then
    osascript -e 'display dialog "Start and end trims must be numeric." buttons {"OK"} with title "Video Trimmer"'
    exit 1
  fi


  # Ask for scaling
  scale_input=$(osascript -e 'text returned of (display dialog "Enter scaling (720, 1080, HD,4K, or leave empty for no scaling):" default answer "" with title "Video Trimmer")')
  
  # Check if user cancelled
  if [[ $? -ne 0 ]]; then
    exit 0
  fi
  
  # Trim whitespace and set scale filter
  scale_input=$(echo "$scale_input" | tr -d ' ')
  
  case "$scale_input" in
    "720") scale_filter="-vf format=yuv420p,scale=720:-2" ;;
    "1080") scale_filter="-vf format=yuv420p,scale=1080:-2" ;;
    "HD") scale_filter="-vf format=yuv420p,scale=1920:-2" ;;
    "4K") scale_filter="-vf format=yuv420p,scale=3840:-2" ;;
    *) scale_filter="" ;; # No scaling
  esac


  # Prompt for output path
  output_path=$(osascript -e 'POSIX path of (choose file name with prompt "Save trimmed video as:" default name "trimmed-video.mp4")')
  
  # Check if user cancelled
  if [[ $? -ne 0 ]]; then
    exit 0
  fi


  # Ensure output has .mp4 extension
  if [[ "$output_path" != *.mp4 ]]; then
    output_path="${output_path}.mp4"
  fi


  # Remove existing file if it exists (file dialog already confirmed overwrite)
  if [[ -e "$output_path" ]]; then
    rm -f "$output_path"
  fi


  # Get duration
  duration=$(/opt/homebrew/bin/ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$input_file" 2>/dev/null)
  duration=${duration%.*}


  # Calculate duration to keep
  trim_duration=$(echo "$duration - $trim_start - $trim_end" | bc)
  if (( $(echo "$trim_duration <= 0" | bc -l) )); then
    osascript -e "display dialog \"Trim duration too short! Original is $duration seconds.\" buttons {\"OK\"} with title \"Video Trimmer\""
    exit 1
  fi





  # Notify start
  osascript -e "display notification \"Trimming start=$trim_start s, end=$trim_end s...\" with title \"Video Trimmer\""


  # Build ffmpeg command
  if [[ -n "$scale_filter" ]]; then
    # With scaling
    ffmpeg_command="/opt/homebrew/bin/ffmpeg -ss \"$trim_start\" -i \"$input_file\" -t \"$trim_duration\" $scale_filter -c:v libx264 -preset slow -crf 22 -c:a aac -b:a 160k -movflags +faststart \"$output_path\""
  else
    # Without scaling
    ffmpeg_command="/opt/homebrew/bin/ffmpeg -ss \"$trim_start\" -i \"$input_file\" -t \"$trim_duration\" -c:v libx264 -preset slow -crf 22 -c:a aac -b:a 160k -movflags +faststart \"$output_path\""
  fi
  
    
  # Execute the command
  eval "$ffmpeg_command" > /dev/null 2>&1


  # Notify result
  if [[ $? -eq 0 ]]; then
    osascript -e "display notification \"Saved: $(basename "$output_path")\" with title \"Video Trimmer\""
  else
    osascript -e 'display dialog "Something went wrong during encoding." buttons {"OK"} with title "Video Trimmer"'
  fi
